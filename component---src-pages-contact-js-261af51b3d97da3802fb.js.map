{"version":3,"sources":["webpack:///./src/components/contact/ImageSequence.js","webpack:///./src/pages/contact.js"],"names":["ImageSequence","timing","imageSequenceInterval","state","activeImage","componentDidMount","this","imageSequenceAnimate","componentWillUnmount","clearInterval","images","props","mod","contactOfficeImage","length","setTimeout","createSequenceInterval","col","setInterval","active","newActive","setState","render","undefined","className","map","officeImg","j","imageFile","backgroundColor","colors","muted","imgSharp","childImageSharp","key","style","position","fluid","src","url","Component","Contact","addTargetBlanks","string","replace","data","craft","seomatic","entries","seo","contactModules","i","contactTitle","dangerouslySetInnerHTML","__html","contactDetails","content","linkOneTitle","linkOneUrl","linkTwoTitle","linkTwoUrl","query"],"mappings":"mlBAGqBA,E,4JACnBC,OAAS,I,EACTC,2B,IAEAC,MAAQ,CACNC,YAAa,G,oHAGfC,kBAAA,WACEC,KAAKC,wB,EAGPC,qBAAA,WACEC,cAAcH,KAAKJ,wB,EAGrBK,qBAAA,WAAuB,IAAD,OACdG,EAAM,EAAOJ,KAAKK,MAAMC,IAAIC,oBAE/BH,EAAOI,OAAS,GACjBC,YAAW,WACT,EAAKb,sBAAwB,EAAKc,uBAAuBN,KACxDJ,KAAKK,MAAMM,IAAMX,KAAKL,OAAS,I,EAItCe,uBAAA,SAAuBN,GAAQ,IAAD,OAC5B,OACEQ,aAAY,WACV,IAAMC,EAAS,EAAKhB,MAAMC,YAEtBgB,EAAaD,IAAWT,EAAOI,OAAS,EAAK,EAAIK,EAAS,EAE9D,EAAKE,SAAS,CAAEjB,YAAagB,MAC5Bd,KAAKL,S,EAIZqB,OAAA,WAAS,IAAD,SACehB,KAAKK,MAAlBC,EADF,EACEA,IAAKK,EADP,EACOA,IAEb,YAAWM,IAARX,EAEC,yBAAKY,UAAU,yBACZZ,EAAIC,mBAAmBY,KAAI,SAAEC,EAAWC,GACjC,IAAEC,EAAcF,EAAdE,UACFC,EAAkBD,EAAUE,OAAOC,MACnCC,EAAWJ,EAAUK,gBAEvBd,EAAU,EAAKhB,MAAMC,cAAgBuB,EAAK,UAAY,GAE1D,OACE,kBAAC,IAAD,CACEO,IAAG,YAAcjB,EAAd,UAA2BU,EAC9BH,UAAS,+BAAiCL,EAC1CgB,MAAO,CAAEC,SAAU,YACnBC,MAAqB,OAAbL,EAAoBA,EAASK,MAAQ,CAAEC,IAAKV,EAAUW,KAC9DV,gBAAkBA,GAAoC,gBAMpD,M,GA/DyBW,a,4FCKtBC,E,oBACnB,WAAY9B,GAAO,IAAD,SAChB,sBAKF+B,gBAAkB,SAAAC,GAChB,OAAOA,EAAOC,QAAQ,cAAe,+BAJrC,EAAKC,KAAOlC,EAAMkC,KAAKC,MAHP,E,0GAUlBxB,OAAA,WAAS,IAAD,OACAyB,EAAWzC,KAAKuC,KAAKE,SACrBC,EAAU1C,KAAKuC,KAAKG,QAAQ,GAElC,OACE,kBAAC,IAAD,CAAQxB,UAAU,UAAUyB,IAAMF,GAChC,yBAAKvB,UAAU,qBACZwB,EAAQE,eAAezB,KAAI,SAAEb,EAAKuC,GACjC,OACE,yBAAK3B,UAAU,iBAAiBU,IAAMtB,EAAIwC,cACxC,kBAAC,EAAD,CAAexC,IAAKA,EAAKK,IAAKkC,IAE9B,yBAAK3B,UAAU,gBACb,wBAAIA,UAAU,gBAAgBZ,EAAIwC,cAClC,yBAAK5B,UAAU,kBAAkB6B,wBAAyB,CAAEC,OAAQ,EAAKZ,gBAAgB9B,EAAI2C,eAAeC,aAG9G,yBAAKhC,UAAU,iBACZZ,EAAI6C,aACH,yBAAKjC,UAAU,qBACb,uBAAGA,UAAU,sBAAsBZ,EAAI6C,cACvC,0BAAMJ,wBAAyB,CAAEC,OAAQ,EAAKZ,gBAAgB9B,EAAI8C,WAAWF,aAE7E,KAEH5C,EAAI+C,aACH,yBAAKnC,UAAU,qBACb,uBAAGA,UAAU,sBAAsBZ,EAAI+C,cACvC,0BAAMN,wBAAyB,CAAEC,OAAQ,EAAKZ,gBAAgB9B,EAAIgD,WAAWJ,aAE7E,a,GAzCehB,aAoDxBqB,EAAK","file":"component---src-pages-contact-js-261af51b3d97da3802fb.js","sourcesContent":["import React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\n\nexport default class ImageSequence extends Component {\n  timing = 5000;\n  imageSequenceInterval;\n\n  state = {\n    activeImage: 0\n  }\n\n  componentDidMount(){\n    this.imageSequenceAnimate();\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.imageSequenceInterval);\n  }\n\n  imageSequenceAnimate(){\n    const images = [...this.props.mod.contactOfficeImage];\n  \n    if(images.length > 1){\n      setTimeout(() => {\n        this.imageSequenceInterval = this.createSequenceInterval(images);\n      }, this.props.col * this.timing / 2) // to offset every even contact image\n    }\n  }\n\n  createSequenceInterval(images){\n    return(\n      setInterval(() => {\n        const active = this.state.activeImage;\n\n        let newActive = (active === images.length - 1) ? 0 : active + 1;\n  \n        this.setState({ activeImage: newActive });\n      }, this.timing)\n    )\n  }\n\n  render(){\n    const { mod, col } = this.props;\n\n    if(mod !== undefined){ // when building this is coming up as undefined for some reason\n      return (\n        <div className=\"contact-imageSequence\">\n          {mod.contactOfficeImage.map(( officeImg, j ) => {\n            const { imageFile } = officeImg,\n                  backgroundColor = imageFile.colors.muted,\n                  imgSharp = imageFile.childImageSharp;\n\n            let active = (this.state.activeImage === j) ? \"-active\" : \"\";\n    \n            return(\n              <Img \n                key={`sequence ${col} image ${j}`}\n                className={`contact-imageSequence-image ${active}`}\n                style={{ position: \"absolute\" }}\n                fluid={ imgSharp !== null ? imgSharp.fluid : { src: imageFile.url } }\n                backgroundColor={ backgroundColor ? backgroundColor : \"#efefef\" }\n              />\n            )\n          })}\n        </div>\n      )  \n    } else return null\n  }\n}","import React, { Component } from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport Layout from \"../components/common/layout\";\nimport ImageSequence from \"../components/contact/ImageSequence\";\n\nimport \"../styles/contact.scss\";\n\nexport default class Contact extends Component {\n  constructor(props){\n    super();\n\n    this.data = props.data.craft;\n  }\n\n  addTargetBlanks = string => {\n    return string.replace(/href=\"http/g, 'target=\"_blank\" href=\"http');\n  }\n\n  render(){\n    const seomatic = this.data.seomatic,\n          entries = this.data.entries[0];\n\n    return (\n      <Layout className=\"contact\" seo={ seomatic }>\n        <div className=\"contact-container\">\n          {entries.contactModules.map(( mod, i ) => {\n            return(\n              <div className=\"contact-column\" key={ mod.contactTitle }>\n                <ImageSequence mod={mod} col={i}/>\n                \n                <div className=\"contact-text\">\n                  <h2 className=\"contact-city\">{mod.contactTitle}</h2>\n                  <div className=\"contact-details\" dangerouslySetInnerHTML={{ __html: this.addTargetBlanks(mod.contactDetails.content) }}/>\n                </div>\n\n                <div className=\"contact-links\">\n                  {mod.linkOneTitle ? (\n                    <div className=\"contact-links-row\">\n                      <p className=\"contact-links-type\">{mod.linkOneTitle}</p>\n                      <span dangerouslySetInnerHTML={{ __html: this.addTargetBlanks(mod.linkOneUrl.content) }}/>\n                    </div>\n                  ) : null}\n                  \n                  {mod.linkTwoTitle ? (\n                    <div className=\"contact-links-row\">\n                      <p className=\"contact-links-type\">{mod.linkTwoTitle}</p>\n                      <span dangerouslySetInnerHTML={{ __html: this.addTargetBlanks(mod.linkTwoUrl.content) }}/>\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Layout>\n    ) \n  }\n}\n\nexport const query = graphql`\n  query {\n    craft {\n      seomatic(uri: \"/contact\") {\n        metaTitleContainer\n        metaTagContainer\n        metaLinkContainer\n        metaScriptContainer\n        metaJsonLdContainer\n      }\n\n      entries(section: [contact]) {\n        ... on Craft_Contact {\n          contactModules {\n            ... on Craft_ContactModulesContacttitlemodule {\n              contactOfficeImage {\n                url\n\n                ... on Craft_UploadsVolume {\n                  __typename\n                  imageFile {\n                    childImageSharp {\n                      fluid(maxWidth: 650) {\n                        ...GatsbyImageSharpFluid_withWebp_noBase64\n                      }\n                    }\n\n                    colors {\n                      muted\n                    }\n                  }\n                }\n              }\n\n              contactTitle\n              contactDetails{\n                content\n              }\n              linkOneTitle\n              linkOneUrl{\n                content\n              }\n              linkTwoTitle\n              linkTwoUrl{\n                content\n              }\n            }\n          }\n        }\n      }\n    }\n  }    \n`;"],"sourceRoot":""}