{"version":3,"sources":["webpack:///./src/pages/contact.js"],"names":["Contact","props","state","activeImages","0","1","imageSequenceIntervals","timing","imageSequenceAnimate","columnCounts","forEach","colCount","i","setTimeout","push","createSequenceInterval","setInterval","currActive","newActive","setState","addTargetBlanks","string","replace","data","craft","componentDidMount","this","entries","contactModules","contactOfficeImage","length","componentWillUnmount","interval","clearInterval","render","seomatic","className","seo","map","mod","key","contactTitle","officeImg","j","active","style","position","fluid","imageFile","childImageSharp","backgroundColor","optimizedimages","colorPalette","dangerouslySetInnerHTML","__html","contactDetails","content","linkOneTitle","linkOneUrl","linkTwoTitle","linkTwoUrl","Component","query"],"mappings":"4SAOqBA,E,oBAQnB,WAAYC,GAAO,IAAD,SAChB,sBARFC,MAAQ,CACNC,aAAc,CAAEC,EAAG,EAAGC,EAAG,IAMT,EAHlBC,uBAAyB,GAGP,EAFlBC,OAAS,IAES,EAwBlBC,qBAAuB,SAAAC,GACrBA,EAAaC,SAAQ,SAAEC,EAAUC,GAC/BC,YAAW,WACNF,EAAW,GAAG,EAAKL,uBAAuBQ,KAAM,EAAKC,uBAAuBJ,EAAUC,MACxFA,EAAI,EAAKL,OAAS,OA5BP,EAgClBQ,uBAAyB,SAAEJ,EAAUC,GACnC,OACEI,aAAY,WAAO,IAAD,EACZC,EAAa,EAAKf,MAAMC,aAAaS,GACrCM,EAAaD,IAAeN,EAAW,EAAK,EAAIM,EAAa,EAEjE,EAAKE,SAAS,CACZhB,aAAa,OAAD,UAAO,EAAKD,MAAMC,cAAlB,OAAiCS,GAAIM,EAArC,QAEb,EAAKX,SAzCM,EA6ClBa,gBAAkB,SAAAC,GAChB,OAAOA,EAAOC,QAAQ,cAAe,+BA3CrC,EAAKC,KAAOtB,EAAMsB,KAAKC,MAHP,E,kHAMlBC,kBAAA,WACE,IAAIhB,EAAe,GAEnBiB,KAAKH,KAAKI,QAAQ,GAAGC,eAAelB,SAAQ,YAA6B,IAA1BmB,EAAyB,EAAzBA,mBAC7CpB,EAAaK,KAAMe,EAAmBC,WAGxCJ,KAAKlB,qBAAsBC,I,EAG7BsB,qBAAA,WAC4C,IAAvCL,KAAKpB,uBAAuBwB,QAC7BJ,KAAKpB,uBAAuBI,SAAQ,SAAAsB,GAClCC,cAAcD,O,EA8BpBE,OAAA,WAAS,IAAD,OACAC,EAAWT,KAAKH,KAAKY,SACrBR,EAAUD,KAAKH,KAAKI,QAAQ,GAElC,OACE,kBAAC,IAAD,CAAQS,UAAU,UAAUC,IAAMF,GAChC,yBAAKC,UAAU,qBACZT,EAAQC,eAAeU,KAAI,SAAEC,EAAK3B,GACjC,OACE,yBAAKwB,UAAU,iBAAiBI,IAAMD,EAAIE,cACxC,yBAAKL,UAAU,yBACZG,EAAIV,mBAAmBS,KAAI,SAAEI,EAAWC,GACvC,IAAIC,EAAU,EAAK1C,MAAMC,aAAaS,KAAO+B,EAAK,UAAY,GAE9D,OACE,kBAAC,IAAD,CACEH,IAAG,YAAc5B,EAAd,UAAyB+B,EAC5BP,UAAS,+BAAiCQ,EAC1CC,MAAO,CAAEC,SAAU,YACnBC,MAAQL,EAAUM,UAAUC,gBAAgBF,MAC5CG,gBAAkBR,EAAUS,gBAAgBC,aAAa,GAAKV,EAAUS,gBAAgBC,aAAa,GAAK,gBAMlH,yBAAKhB,UAAU,gBACb,wBAAIA,UAAU,gBAAgBG,EAAIE,cAClC,yBAAKL,UAAU,kBAAkBiB,wBAAyB,CAAEC,OAAQ,EAAKlC,gBAAgBmB,EAAIgB,eAAeC,aAG9G,yBAAKpB,UAAU,iBACZG,EAAIkB,aACH,yBAAKrB,UAAU,qBACb,uBAAGA,UAAU,sBAAsBG,EAAIkB,cACvC,0BAAMJ,wBAAyB,CAAEC,OAAQ,EAAKlC,gBAAgBmB,EAAImB,WAAWF,aAE7E,KAEHjB,EAAIoB,aACH,yBAAKvB,UAAU,qBACb,uBAAGA,UAAU,sBAAsBG,EAAIoB,cACvC,0BAAMN,wBAAyB,CAAEC,OAAQ,EAAKlC,gBAAgBmB,EAAIqB,WAAWJ,aAE7E,a,GArGeK,aAgHxBC,EAAK","file":"component---src-pages-contact-js-3ae59525626a49fe90d7.js","sourcesContent":["import React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\n\nimport Layout from \"../components/layout\";\n\nimport \"../styles/contact.scss\";\n\nexport default class Contact extends Component {\n  state = {\n    activeImages: { 0: 0, 1: 0}\n  }\n\n  imageSequenceIntervals = [];\n  timing = 5000;\n\n  constructor(props){\n    super();\n\n    this.data = props.data.craft;\n  }\n\n  componentDidMount(){\n    let columnCounts = [];\n\n    this.data.entries[0].contactModules.forEach(({ contactOfficeImage }) => {\n      columnCounts.push( contactOfficeImage.length );\n    })\n\n    this.imageSequenceAnimate( columnCounts );\n  }\n\n  componentWillUnmount(){\n    if(this.imageSequenceIntervals.length === 0){\n      this.imageSequenceIntervals.forEach(interval => {\n        clearInterval(interval);\n      })\n    }\n  }\n\n  imageSequenceAnimate = columnCounts => {\n    columnCounts.forEach(( colCount, i ) => {\n      setTimeout(() => {\n        if(colCount > 1) this.imageSequenceIntervals.push( this.createSequenceInterval(colCount, i) )\n      }, i * this.timing / 2) // to offset every even contact image\n    })\n  }\n\n  createSequenceInterval = ( colCount, i ) => {\n    return(\n      setInterval(() => {\n        let currActive = this.state.activeImages[i],\n            newActive = (currActive === colCount - 1) ? 0 : currActive + 1;\n\n        this.setState({\n          activeImages: { ...this.state.activeImages, [i]: newActive }\n        })\n      }, this.timing)\n    )\n  }\n\n  addTargetBlanks = string => {\n    return string.replace(/href=\"http/g, 'target=\"_blank\" href=\"http');\n  }\n\n  render(){\n    const seomatic = this.data.seomatic,\n          entries = this.data.entries[0];\n\n    return (\n      <Layout className=\"contact\" seo={ seomatic }>\n        <div className=\"contact-container\">\n          {entries.contactModules.map(( mod, i ) => {\n            return(\n              <div className=\"contact-column\" key={ mod.contactTitle }>\n                <div className=\"contact-imageSequence\">\n                  {mod.contactOfficeImage.map(( officeImg, j ) => {\n                    let active = (this.state.activeImages[i] === j) ? \"-active\" : \"\";\n\n                    return(\n                      <Img \n                        key={`sequence ${i} image ${j}`}\n                        className={`contact-imageSequence-image ${active}`}\n                        style={{ position: \"absolute\" }}\n                        fluid={ officeImg.imageFile.childImageSharp.fluid }\n                        backgroundColor={ officeImg.optimizedimages.colorPalette[0] ? officeImg.optimizedimages.colorPalette[0] : \"#efefef\" }\n                      />\n                    )\n                  })}\n                </div>\n                \n                <div className=\"contact-text\">\n                  <h2 className=\"contact-city\">{mod.contactTitle}</h2>\n                  <div className=\"contact-details\" dangerouslySetInnerHTML={{ __html: this.addTargetBlanks(mod.contactDetails.content) }}/>\n                </div>\n\n                <div className=\"contact-links\">\n                  {mod.linkOneTitle ? (\n                    <div className=\"contact-links-row\">\n                      <p className=\"contact-links-type\">{mod.linkOneTitle}</p>\n                      <span dangerouslySetInnerHTML={{ __html: this.addTargetBlanks(mod.linkOneUrl.content) }}/>\n                    </div>\n                  ) : null}\n                  \n                  {mod.linkTwoTitle ? (\n                    <div className=\"contact-links-row\">\n                      <p className=\"contact-links-type\">{mod.linkTwoTitle}</p>\n                      <span dangerouslySetInnerHTML={{ __html: this.addTargetBlanks(mod.linkTwoUrl.content) }}/>\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Layout>\n    ) \n  }\n}\n\nexport const query = graphql`\n  query {\n    craft {\n      seomatic(uri: \"/contact\") {\n        metaTitleContainer\n        metaTagContainer\n        metaLinkContainer\n        metaScriptContainer\n        metaJsonLdContainer\n      }\n\n      entries(section: [contact]) {\n        ... on Craft_Contact {\n          contactModules {\n            ... on Craft_ContactModulesContacttitlemodule {\n              contactOfficeImage {\n                width\n                height\n                url\n                ... on Craft_UploadsVolume {\n                  url\n\n                  imageFile {\n                    childImageSharp {\n                      fluid(maxWidth: 650) {\n                        ...GatsbyImageSharpFluid_withWebp_noBase64\n                      }\n                    }\n                  }\n\n                  optimizedimages {\n                    colorPalette\n                  }\n                }\n              }\n              contactTitle\n              contactDetails{\n                content\n              }\n              linkOneTitle\n              linkOneUrl{\n                content\n              }\n              linkTwoTitle\n              linkTwoUrl{\n                content\n              }\n            }\n          }\n        }\n      }\n    }\n  }    \n`;"],"sourceRoot":""}