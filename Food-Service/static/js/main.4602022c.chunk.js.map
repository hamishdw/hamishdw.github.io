{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","currentPage","nextPage","pages","$","current","click","handler","unbind","eq","this","hasClass","length","fadeTo","fadeIn","css","hide","bind","attr","react_default","a","createElement","id","src","width","height","autoPlay","muted","loop","type","class","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4602022c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport $ from \"jquery\";\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount(){\n    // $(window).load(function(){\n      var pages = $('#container li'), current=0;\n      var currentPage,nextPage;\n      var handler=function(){\n        $('#container .button').unbind('click');\n        currentPage= pages.eq(current);\n        if($(this).hasClass('prevButton'))\n        {\n          if (current <= 0)\n            current=pages.length-1;\n          else\n            current=current-1;\n        }\n        else\n        {\n  \n          if (current >= pages.length-1)\n            current=0;\n          else\n            current=current+1;\n        }\n        nextPage = pages.eq(current);\t\n        currentPage.fadeTo('slow',0.3,function(){\n          nextPage.fadeIn('slow',function(){\n            nextPage.css(\"opacity\",1);\n            currentPage.hide();\n            currentPage.css(\"opacity\",1);\n            $('#container .button').bind('click',handler);\n          });\t\n        });\n      }\n  \n      $('#container .button').click(handler);\n\n      $(\"#sillyReact\").attr('muted','muted');\n      \n  // });\n  }\n\n  render() {\n    return (\n      <center>\n        <br /><br /> \n\n        <div id=\"container\">\n          <ul>\n                <li><img src=\"./images/picture1.jpg\" width=\"768\" height=\"1024\" /></li>\n                <li><img src=\"./images/picture2.jpg\" width=\"768\" height=\"1024\" /></li>\n                <li><img src=\"./images/picture3.jpg\" width=\"768\" height=\"1024\" /></li>\n                <li>\n                  <video id=\"sillyReact\" width=\"960\" height=\"310\" autoPlay muted loop>\n                    <source src=\"./videos/grassfed.mp4\" type=\"video/mp4\"/>\n                  </video>\n                </li>\n              </ul>\n              <span class=\"button prevButton\"></span>\n              <span class=\"button nextButton\"></span>\n        </div>\n        </center>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}