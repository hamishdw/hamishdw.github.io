{"version":3,"sources":["fbConfig.js","CMForm.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","process","authDomain","concat","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","firestore","CMForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","CMSubscriber","EmailAddress","Name","CustomFields","Key","Value","Resubscribe","RestartSubscriptionBasedAutoresponders","ConsentToTrack","api","campaignMonitor","addSubscriber","e","preventDefault","axios","method","headers","content-type","url","data","serialize","target","then","res","console","log","form","serialized","i","elements","length","field","name","disabled","type","n","options","selected","push","encodeURIComponent","value","checked","join","_this2","react_default","a","createElement","id","className","onSubmit","formSubmit","data-id","htmlFor","required","Component","App","db","setState","defineProperty","collection","add","objectSpread","state","RSVP","catch","err","error","_this3","text","icon","map","key","placeholder","onBlur","inputBlur","style","backgroundImage","data-text","onClick","submit","CMForm_CMForm","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9977aa19.chunk.js","sourcesContent":["import firebase from 'firebase/app'; // removing node modules and reventing to - import firebase from 'firebase'; - helped fix error before\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: `${process.env.REACT_APP_PROJECT_ID}.firebaseapp.com`,\n  databaseURL: `https://${process.env.REACT_APP_PROJECT_ID}.firebaseio.com`,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: `${process.env.REACT_APP_PROJECT_ID}.appspot.com`,\n  messagingSenderId: process.env.REACT_APP_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n  \nfirebase.initializeApp(config);\nfirebase.firestore();\n\nexport default firebase;","import React, { Component } from 'react';\nimport campaignMonitor from 'campaignmonitor';\nimport axios from 'axios';\n\nexport default class CMForm extends Component{\n  CMSubscriber = {\n    \"EmailAddress\": \"subscriber@example.com\",\n    \"Name\": \"New Subscriber\",\n    \"CustomFields\": [\n        {\n            \"Key\": \"website\",\n            \"Value\": \"http://example.com\"\n        },\n        {\n            \"Key\": \"interests\",\n            \"Value\": \"magic\"\n        },\n        {\n            \"Key\": \"interests\",\n            \"Value\": \"romantic walks\"\n        }\n    ],\n    \"Resubscribe\": true,\n    \"RestartSubscriptionBasedAutoresponders\": true,\n    \"ConsentToTrack\":\"Yes\"\n  }\n\n  constructor(){\n    super();\n\n    this.api = campaignMonitor({\n      apiKey: process.env.REACT_APP_CM_API_KEY\n    })\n\n    this.api.addSubscriber(\n      process.env.REACT_APP_CM_LIST_ID,\n      this.CMSubscriber\n    )\n  }\n\n  formSubmit(e){\n    e.preventDefault();\n\n    axios({\n      method: 'POST',\n      headers: { \n        \"content-type\": \"application/json; charset=utf-8\",  \n      },\n      url: 'https://www.createsend.com/t/subscribeerror?description=',\n      data: this.serialize(e.target)\n    }).then(res => {\n      console.log('res',res);\n    });\n  }\n\n  serialize(form){\n    var serialized = [];\n  \n    // Loop through each field in the form\n    for (var i = 0; i < form.elements.length; i++) {\n  \n      var field = form.elements[i];\n  \n      // Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields\n      if (!field.name || field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') continue;\n  \n      // If a multi-select, get all selections\n      if (field.type === 'select-multiple') {\n        for (var n = 0; n < field.options.length; n++) {\n          if (!field.options[n].selected) continue;\n          serialized.push(encodeURIComponent(field.name) + \"=\" + encodeURIComponent(field.options[n].value));\n        }\n      }\n  \n      // Convert field data to a query string\n      else if ((field.type !== 'checkbox' && field.type !== 'radio') || field.checked) {\n        serialized.push(encodeURIComponent(field.name) + \"=\" + encodeURIComponent(field.value));\n      }\n    }\n  \n    return serialized.join('&');\n  }\n\n  render(){\n    return (\n      <form id=\"subForm\" className=\"js-cm-form\" onSubmit={e => this.formSubmit(e)} data-id=\"2BE4EF332AA2E32596E38B640E90561930D81A70B52CD92541999D820B349639F3B2D0F03DAA8BD005A8A036ACAE54CC7DC8E83899520BED2C6EF40FAF7B7E76\">\t\n        <p>\n            <input id=\"fieldName\" name=\"cm-name\" type=\"text\" />\n            <label htmlFor=\"fieldName\">Name</label>\n        </p>\n        <p>\n            <input id=\"fieldEmail\" name=\"cm-silzr-silzr\" type=\"email\" className=\"js-cm-email-input\" required/>\n            <label htmlFor=\"fieldEmail\">Email</label>\n        </p>\n        <p>\n            <input id=\"fieldyhiuktj\" name=\"cm-f-yhiuktj\" type=\"text\" />\n            <label htmlFor=\"fieldyhiuktj\">Location</label>\n        </p>\n        <p>\n            <input id=\"fieldyhiukiu\" name=\"cm-f-yhiukiu\" type=\"text\" />\n            <label htmlFor=\"fieldyhiukiu\">Company</label>\n        </p>\n        <p>\n            <input className=\"js-cm-submit-button\" type=\"submit\" value=\"Subscribe\"/>\n        </p>\n      </form>\n    );\n  }\n}","import React, { Component } from 'react';\nimport firebase from './fbConfig';\nimport CMForm from './CMForm';\n\nexport default class App extends Component{\n  constructor(){\n    super();\n\n    this.db = firebase.firestore();\n  }\n\n  inputBlur(e, id){\n    this.setState({\n      [id]: e.target.value\n    })\n  }\n\n  submit(){\n    this.db.collection('womenOfInfluence').add({\n      ...this.state,\n      RSVP: true\n    })\n    .then(e => {\n      console.log(\"Document successfully written!\", this.state);\n    })\n    .catch(err => {\n        console.error(\"Error writing document: \", err);\n    });\n\n    // this.db.collection('womenOfInfluence').get().then(data => {\n    //   data.docs.forEach(doc => {\n    //     console.log('doc.data()',doc.data());\n    //   })\n    // }).catch(function(error) {\n    //     console.log(\"Error getting document:\", error);\n    // });\n  \n  }\n\n  render(){\n    const fields = [\n      {\n        id: \"Name\",\n        text: \"Full Name\",\n        icon: \"./icons/logo.svg\",\n        type: \"text\"\n      },\n      {\n        id: \"Email\",\n        text: \"Email address\",\n        icon: \"./icons/logo.svg\",\n        type: \"email\"\n      },\n      {\n        id: \"Organisation\",\n        text: \"Organisation\",\n        icon: \"./icons/logo.svg\",\n        type: \"text\"\n      }\n    ];\n\n    return (\n      <main>\n        <section className=\"form\">\n          {fields.map(field => {\n            return(\n              <div key={field.id} className=\"input\">\n                <input placeholder=\" \" type={field.type} id={field.id} required onBlur={e => this.inputBlur(e, field.id)}/>\n                <label htmlFor={field.id} style={{backgroundImage: `url(${field.icon})`}} data-text={field.text}/>\n              </div>\n            )\n          })}\n\n          <div className=\"submit\" onClick={ () => this.submit() }>Register</div>\n        </section>\n\n        <CMForm/>\n      </main>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}