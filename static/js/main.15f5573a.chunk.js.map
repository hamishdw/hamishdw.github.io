{"version":3,"sources":["components/Tiles.js","components/SelectMedia.js","App.js","serviceWorker.js","index.js"],"names":["createTiles","cols","Array","map","fill","tiles","y","length","row","x","newTile","avilableWidth","i","randomW","randomTiles","randomH","gridArea","push","splice","maxTiles","tilesLeft","largestPossible","Math","min","ceil","random","React","memo","setActiveTile","useState","setTiles","useEffect","colors","className","color","floor","style","gridColumn","gridRow","backgroundColor","key","onClick","SelectMedia","activeTile","console","log","option","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.15f5573a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst w = 8;\nconst h = 5;\n\nconst maxW = 6;\nconst maxH = 4;\n\nconst Tiles = ({ setActiveTile }) => {\n  const [ tiles, setTiles ] = useState([]);\n  const tileUpdate = () => setTiles(createTiles());\n\n  useEffect(() => {\n    tileUpdate();\n\n    // setInterval(() => {  \n    //   tileUpdate();\n    // }, 1000)\n  }, []);\n\n  const colors = [\n    \"fff\",\n    \"000\",\n    \"ffff00\"\n  ];\n\n  return (\n    <div className=\"tiles\">\n      {tiles.map(({ x, y }, i) => {\n        const color = colors[Math.floor(Math.random() * colors.length)];\n\n        const style = {\n          gridColumn: `${x[0]} / span ${x[1]}`,\n          gridRow: `${y[0]} / span ${y[1]}`,\n          backgroundColor: \"#\" + color\n        }\n\n        return (\n          <div className=\"tile\" key={x[0] + \"\" + y[0]} style={style}>\n            <p className=\"takeover\" onClick={ () => setActiveTile(i) }>Takeover Panel</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst createTiles = () => {\n  let cols = [...new Array(h)].map(() => new Array(w).fill(false));\n  let tiles = [];\n\n  for(let y = 0; y < cols.length; y++){\n    const row = cols[y];\n\n    for(let x = 0; x < row.length; x++){\n      const cell = row[x];\n\n      if(cell === false){\n        newTile(tiles, cols, row, x, y);\n      } \n    }\n  }\n\n  return tiles;\n}\n\nconst newTile = (tiles, cols, row, x, y) => {\n  let avilableWidth = 0;\n        \n  for(let i = x; i < w; i++){\n    if(row[i] === false) \n      avilableWidth++;  \n    else break;\n  }\n\n  const randomW = randomTiles(maxW, avilableWidth);\n  const randomH = randomTiles(maxH, h - y);\n\n  const gridArea = {\n    x: [x + 1, randomW], \n    y: [y + 1, randomH] \n  };\n\n  tiles.push(gridArea);\n\n  for(let i = y; i < randomH + y; i++){\n    cols[i].splice(x, randomW, ...new Array(randomW).fill(true));\n  }\n\n  x = randomW;\n}\n\nconst randomTiles = (maxTiles, tilesLeft) => {\n  const largestPossible = Math.min( maxTiles, tilesLeft );\n  const random = Math.ceil( largestPossible * Math.random() );\n\n  return random;\n}\n\nexport default React.memo(Tiles);","import React from 'react';\n\nconst SelectMedia = ({ activeTile, setActiveTile }) => {\n  console.log('activeTile',activeTile);\n\n  const mediaOptions = [\n    \"Connect Webcam\",\n    \"Text\",\n    \"Giphy\",\n    \"Image\",\n    \"Video\",\n    \"Web Link\",\n    \"Remove Media\"\n  ]\n\n  return (\n    <div className=\"selectMedia\">\n      <div className=\"selectMedia-close\" onClick={() => setActiveTile(false)}>Close</div>\n      <h3 className=\"selectMedia-title\">Select Media</h3>\n      <ul className=\"selectMedia-options\">\n        {mediaOptions.map(option => (\n          <li key={option} className=\"selectMedia-item\">{ option }</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default SelectMedia;","import React, { useState } from 'react';\nimport Tiles from './components/Tiles';\nimport SelectMedia from './components/SelectMedia';\n\nconst App = () => {\n  const [ activeTile, setActiveTile ] = useState(false);\n\n  return (\n    <main>\n      <Tiles setActiveTile={setActiveTile}/>\n      \n      {activeTile !== false && (\n        <SelectMedia activeTile={activeTile} setActiveTile={setActiveTile}/>\n      )}\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}