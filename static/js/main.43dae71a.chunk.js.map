{"version":3,"sources":["fbConfig.js","CMForm.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","process","authDomain","concat","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","firestore","CMForm","react_default","a","createElement","Fragment","type","src","id","className","action","method","data-id","htmlFor","name","required","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","db","e","setState","defineProperty","target","value","_this2","collection","add","objectSpread","state","RSVP","then","console","log","catch","err","error","_this3","text","icon","map","field","key","placeholder","onBlur","inputBlur","style","backgroundImage","data-text","onClick","submit","CMForm_CMForm","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43dae71a.chunk.js","sourcesContent":["import firebase from 'firebase/app'; // removing node modules and reventing to - import firebase from 'firebase'; - helped fix error before\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: `${process.env.REACT_APP_PROJECT_ID}.firebaseapp.com`,\n  databaseURL: `https://${process.env.REACT_APP_PROJECT_ID}.firebaseio.com`,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: `${process.env.REACT_APP_PROJECT_ID}.appspot.com`,\n  messagingSenderId: process.env.REACT_APP_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n  \nfirebase.initializeApp(config);\nfirebase.firestore();\n\nexport default firebase;","import React, { Component } from 'react';\nimport campaignMonitor from 'campaignmonitor';\nimport axios from 'axios';\n\nexport default class CMForm extends Component{\n  render(){\n    return (\n      <React.Fragment>\n        <script type=\"text/javascript\" src=\"https://js.createsend1.com/javascript/copypastesubscribeformlogic.js\"></script>\n\n        <form id=\"subForm\" className=\"js-cm-form\" action=\"https://www.createsend.com/t/subscribeerror?description=\" method=\"post\" data-id=\"2BE4EF332AA2E32596E38B640E90561930D81A70B52CD92541999D820B349639F3B2D0F03DAA8BD005A8A036ACAE54CC7DC8E83899520BED2C6EF40FAF7B7E76\">\t\n          <p>\n              <label htmlFor=\"fieldName\">Name</label>\n              <br />\n              <input id=\"fieldName\" name=\"cm-name\" type=\"text\" />\n          </p>\n          <p>\n              <label htmlFor=\"fieldEmail\">Email</label>\n              <br />\n              <input id=\"fieldEmail\" name=\"cm-silzr-silzr\" type=\"email\" className=\"js-cm-email-input\"\n              required />\n          </p>\n          <p>\n              <label htmlFor=\"fieldyhiuktj\">Location</label>\n              <br />\n              <input id=\"fieldyhiuktj\" name=\"cm-f-yhiuktj\" type=\"text\" />\n          </p>\n          <p>\n              <label htmlFor=\"fieldyhiukiu\">Company</label>\n              <br />\n              <input id=\"fieldyhiukiu\" name=\"cm-f-yhiukiu\" type=\"text\" />\n          </p>\n          <p>\n              <button className=\"js-cm-submit-button\" type=\"submit\">Subscribe</button>\n          </p>\n        </form>\n      </React.Fragment>\n    );\n  }\n}","import React, { Component } from 'react';\nimport firebase from './fbConfig';\nimport CMForm from './CMForm';\n\nexport default class App extends Component{\n  constructor(){\n    super();\n\n    this.db = firebase.firestore();\n  }\n\n  inputBlur(e, id){\n    this.setState({\n      [id]: e.target.value\n    })\n  }\n\n  submit(){\n    this.db.collection('womenOfInfluence').add({\n      ...this.state,\n      RSVP: true\n    })\n    .then(e => {\n      console.log(\"Document successfully written!\", this.state);\n    })\n    .catch(err => {\n        console.error(\"Error writing document: \", err);\n    });\n\n    // this.db.collection('womenOfInfluence').get().then(data => {\n    //   data.docs.forEach(doc => {\n    //     console.log('doc.data()',doc.data());\n    //   })\n    // }).catch(function(error) {\n    //     console.log(\"Error getting document:\", error);\n    // });\n  \n  }\n\n  render(){\n    const fields = [\n      {\n        id: \"Name\",\n        text: \"Full Name\",\n        icon: \"./icons/logo.svg\",\n        type: \"text\"\n      },\n      {\n        id: \"Email\",\n        text: \"Email address\",\n        icon: \"./icons/logo.svg\",\n        type: \"email\"\n      },\n      {\n        id: \"Organisation\",\n        text: \"Organisation\",\n        icon: \"./icons/logo.svg\",\n        type: \"text\"\n      }\n    ];\n\n    return (\n      <main>\n        <section className=\"form\">\n          {fields.map(field => {\n            return(\n              <div key={field.id} className=\"input\">\n                <input placeholder=\" \" type={field.type} id={field.id} required onBlur={e => this.inputBlur(e, field.id)}/>\n                <label htmlFor={field.id} style={{backgroundImage: `url(${field.icon})`}} data-text={field.text}/>\n              </div>\n            )\n          })}\n\n          <div className=\"submit\" onClick={ () => this.submit() }>Register</div>\n        </section>\n\n        <CMForm/>\n      </main>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}